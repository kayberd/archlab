# Execution begins at address 0 
			.pos 0
init: 		irmovl Stack, %esp	 	# set up stack pointer 
			irmovl Stack, %ebp 		# set up base pointer 
			call Main 				# execute main program 
			halt 					# terminate program 

# Sample linked list
			.align 4
ele1:
			.long 0X00a
			.long ele2
ele2:
			.long 0x0b0
			.long ele3
ele3:
			.long 0xc00
			.long 0

Main: 		pushl %ebp 
			rrmovl %esp,%ebp
			irmovl ele1,%eax
			pushl %eax 				# push ele1
			call rsum_list			# rsum_list(ele1) 
			rrmovl %ebp,%esp
			popl %ebp
			ret

# int rsum_list(list_ptr ls)
rsum_list: 	pushl %ebp 
			rrmovl %esp,%ebp
			irmovl $-4,%ebx
			addl %ebx,%esp
			mrmovl 8(%ebp),%ecx 	# ecx = ele1
			andl %ecx,%ecx 			# test ecx
			jne Recursion
			xorl %eax,%eax			# eax = 0
			jmp End
Recursion:	mrmovl (%ecx),%ebx		# ebx = *ls
			rmmovl %ebx,(%esp)		# *esp = ebx
			mrmovl 4(%ecx),%ebx
			pushl %ebx				# push ls->next
			call rsum_list			# rsum_list(ls->next)
			mrmovl 4(%esp),%ebx
			addl %ebx,%eax			# eax = eax + ebx
End: 		rrmovl %ebp,%esp
			popl %ebp
			ret

# The stack starts here and grows to lower addresses 
			.pos 0x100
Stack:
