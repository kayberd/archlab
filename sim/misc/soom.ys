/* $begin code-yso */
/* $begin code-ysa */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Sample linked list
	.align 4 	
ele1:	
	.long 0X00a
	.long ele2
ele2:
	.long 0x0b0
	.long ele3
ele3:
	.long 0xc00
	.long 0

Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%eax	
	pushl %eax		# push ele1
	call sum_list
	rrmovl %ebp,%esp
	popl %ebp
	ret

# int sum_list(list_ptr ls)
/* $begin sum-ys 0 */
sum_list: 	
			pushl %ebp 
			rrmovl %esp,%ebp
			mrmovl 8(%ebp),%ecx 	# ecx = ele1
			xorl %eax, %eax			# eax = 0
			andl %ecx, %ecx 		# test ecx
			je End
Loop:		mrmovl (%ecx),%esi		# get *ls
			addl %esi,%eax			# add to sum
			mrmovl 4(%ecx), %ecx 	# ls = ls->next
			andl %ecx, %ecx 		# test ecx
			jne Loop
End: 		rrmovl %ebp,%esp
			popl %ebp
			ret
/* $end sum-ys 0 */

# The stack starts here and grows to lower addresses 
			.pos 0x100
Stack:
/* $end code-ysa */
/* $end code-yso */
