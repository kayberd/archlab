# Execution begins at address 0 
			.pos 0
init: 		irmovq Stack, %esp	 	# set up stack pointer 
			irmovq Stack, %ebp 		# set up base pointer 
			call Main 				# execute main program 
			halt 					# terminate program 

			.align 4
# Source block
src:		
			.quad 0x001
			.quad 0x002
			.quad 0x004

# Destination block
dest:		
			.quad 0x111
			.quad 0x222
			.quad 0x333

Main: 		pushq %ebp 
			rrmovq %esp,%ebp
			irmovq $3,%eax
			pushq %eax				# push 3
			irmovq dest,%eax
			pushq %eax 				# push dest
			irmovq src,%eax
			pushq %eax				# push src
			call copy_block			# copy_block(src, dest, 3) 
			rrmovq %ebp,%esp
			popq %ebp
			ret

# int copy_block(int *src, int *dest, int len)
copy_block: pushq %ebp 
			rrmovq %esp,%ebp
			mrmovq 8(%ebp),%edx 	# edx = src
			mrmovq 12(%ebp),%ecx	# ecx = dest
			mrmovq 16(%ebp),%ebx	# ebx = 3
			xorq %eax,%eax			# eax = 0
			andq %ebx,%ebx			# test ebx
			je End
Loop:		mrmovq (%edx),%esi
			rmmovq %esi,(%ecx)
			xorq %esi,%eax 			# eax ^= esi
			irmovq $4,%esi
			addq %esi,%edx 			# edx -= 4
			addq %esi,%ecx 			# ecx -= 4
			irmovq $-1,%esi
			addq %esi,%ebx			# ebx--
			jne Loop
End: 		rrmovq %ebp,%esp
			popq %ebp
			ret

# The stack starts here and grows to lower addresses 
			.pos 0x100
Stack:
