# Execution begins at address 0 
			.pos 0
init: 		irmovq Stack, %esp	 	# set up stack pointer 
			irmovq Stack, %ebp 		# set up base pointer 
			call Main 				# execute main program 
			halt 					# terminate program 

# Sample linked list
			.align 8
ele1:
			.quad 0xa00
			.quad ele2
ele2:
			.quad 0x0b0
			.quad ele3
ele3:
			.quad 0x00c
			.quad 0

Main: 		pushq %ebp 
			rrmovq %esp,%ebp
			irmovq ele1,%eax
			pushq %eax 				# push ele1
			call rsum_list			# rsum_list(ele1) 
			rrmovq %ebp,%esp
			popq %ebp
			ret

rsum_list: 	pushq %ebp 
			rrmovq %esp,%ebp
			irmovq $-4,%ebx
			addq %ebx,%esp
			mrmovq 8(%ebp),%ecx 	# ecx = ele1
			andq %ecx,%ecx 			# test ecx
			jne Recursion
			xorq %eax,%eax			# eax = 0
			jmp End
Recursion:	mrmovq (%ecx),%ebx		# ebx = *ls
			rmmovq %ebx,(%esp)		# *esp = ebx
			mrmovq 4(%ecx),%ebx
			pushl %ebx				# push ls->next
			call rsum_list			# rsum_list(ls->next)
			mrmovq 4(%esp),%ebx
			addq %ebx,%eax			# eax = eax + ebx
End: 		rrmovq %ebp,%esp
			popq %ebp
			ret

# The stack starts here and grows to lower addresses 
			.pos 0x100
Stack:
